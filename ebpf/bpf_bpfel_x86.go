// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfChanrecvEvent struct {
	StackId  int32
	Selected bool
	Received bool
	_        [2]byte
	Function uint32
}

type bpfChanrecvEventKey struct {
	GoroutineId int64
	Ktime       uint64
}

type bpfChansendEvent struct {
	StackId  int32
	Success  bool
	_        [3]byte
	Function uint32
}

type bpfChansendEventKey struct {
	GoroutineId int64
	Ktime       uint64
}

type bpfClosechanEvent struct{ StackId int32 }

type bpfClosechanEventKey struct {
	GoroutineId int64
	Ktime       uint64
}

type bpfGoexit1Event struct{ StackId int32 }

type bpfGoexit1EventKey struct {
	GoroutineId int64
	Ktime       uint64
}

type bpfMakechanEvent struct {
	StackId  int32
	ChanSize int32
}

type bpfMakechanEventKey struct {
	GoroutineId int64
	Ktime       uint64
}

type bpfNewproc1Event struct{ StackId int32 }

type bpfNewproc1EventKey struct {
	GoroutineId int64
	Ktime       uint64
}

type bpfStackTraceT [20]uint64

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	RuntimeChanrecv1       *ebpf.ProgramSpec `ebpf:"runtime_chanrecv1"`
	RuntimeChanrecv2       *ebpf.ProgramSpec `ebpf:"runtime_chanrecv2"`
	RuntimeChansend1       *ebpf.ProgramSpec `ebpf:"runtime_chansend1"`
	RuntimeClosechan       *ebpf.ProgramSpec `ebpf:"runtime_closechan"`
	RuntimeGoexit1         *ebpf.ProgramSpec `ebpf:"runtime_goexit1"`
	RuntimeMakechan        *ebpf.ProgramSpec `ebpf:"runtime_makechan"`
	RuntimeNewproc1        *ebpf.ProgramSpec `ebpf:"runtime_newproc1"`
	RuntimeReflectChansend *ebpf.ProgramSpec `ebpf:"runtime_reflect_chansend"`
	RuntimeSelectnbsend    *ebpf.ProgramSpec `ebpf:"runtime_selectnbsend"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	ChanrecvEvents  *ebpf.MapSpec `ebpf:"chanrecv_events"`
	ChansendEvents  *ebpf.MapSpec `ebpf:"chansend_events"`
	ClosechanEvents *ebpf.MapSpec `ebpf:"closechan_events"`
	Goexit1Events   *ebpf.MapSpec `ebpf:"goexit1_events"`
	MakechanEvents  *ebpf.MapSpec `ebpf:"makechan_events"`
	Newproc1Events  *ebpf.MapSpec `ebpf:"newproc1_events"`
	StackAddresses  *ebpf.MapSpec `ebpf:"stack_addresses"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	ChanrecvEvents  *ebpf.Map `ebpf:"chanrecv_events"`
	ChansendEvents  *ebpf.Map `ebpf:"chansend_events"`
	ClosechanEvents *ebpf.Map `ebpf:"closechan_events"`
	Goexit1Events   *ebpf.Map `ebpf:"goexit1_events"`
	MakechanEvents  *ebpf.Map `ebpf:"makechan_events"`
	Newproc1Events  *ebpf.Map `ebpf:"newproc1_events"`
	StackAddresses  *ebpf.Map `ebpf:"stack_addresses"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.ChanrecvEvents,
		m.ChansendEvents,
		m.ClosechanEvents,
		m.Goexit1Events,
		m.MakechanEvents,
		m.Newproc1Events,
		m.StackAddresses,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	RuntimeChanrecv1       *ebpf.Program `ebpf:"runtime_chanrecv1"`
	RuntimeChanrecv2       *ebpf.Program `ebpf:"runtime_chanrecv2"`
	RuntimeChansend1       *ebpf.Program `ebpf:"runtime_chansend1"`
	RuntimeClosechan       *ebpf.Program `ebpf:"runtime_closechan"`
	RuntimeGoexit1         *ebpf.Program `ebpf:"runtime_goexit1"`
	RuntimeMakechan        *ebpf.Program `ebpf:"runtime_makechan"`
	RuntimeNewproc1        *ebpf.Program `ebpf:"runtime_newproc1"`
	RuntimeReflectChansend *ebpf.Program `ebpf:"runtime_reflect_chansend"`
	RuntimeSelectnbsend    *ebpf.Program `ebpf:"runtime_selectnbsend"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.RuntimeChanrecv1,
		p.RuntimeChanrecv2,
		p.RuntimeChansend1,
		p.RuntimeClosechan,
		p.RuntimeGoexit1,
		p.RuntimeMakechan,
		p.RuntimeNewproc1,
		p.RuntimeReflectChansend,
		p.RuntimeSelectnbsend,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfel_x86.o
var _BpfBytes []byte
